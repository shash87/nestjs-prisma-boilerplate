// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ----------------------------------------------------
// Prisma + Postgres (Supabase) schema for FarmhouseBooking
// ----------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ------------------------- Enums ---------------------
enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum FarmhouseStatus {
  ACTIVE
  INACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  SYSTEM
  BOOKING
  PAYMENT
  PROMO
}

// ------------------------- Core ----------------------

model User {
  id            String          @id @default(uuid()) @db.Uuid
  email         String          @unique
  role          UserRole        @default(CUSTOMER)
  status        UserStatus      @default(ACTIVE)
  passwordHash  String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  profile       UserProfile?
  bookings      Booking[]
  managedHouses Farmhouse[]     @relation("ManagedBy")
  notifications Notification[]
  auditLogs     AuditLog[]
  reviews       Review[]

  @@index([role])
  @@index([status])
}

model UserProfile {
  id              String   @id @default(uuid()) @db.Uuid
  firstName       String?
  lastName        String?
  phoneNumber     String?
  altPhoneNumber  String?
  profileImageUrl String?
  address         String?
  userId          String   @unique @db.Uuid
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String          @id @default(uuid()) @db.Uuid
  type      NotificationType
  message   String
  payload   Json?
  isRead    Boolean         @default(false)
  userId    String          @db.Uuid
  createdAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  action    String   // e.g. "BOOKING_CREATE"
  entity    String   // e.g. "Booking"
  entityId  String?  // UUID or external id
  ip        String?
  metadata  Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([entity, entityId])
  @@index([userId])
}

// ---------------------- Farmhouses -------------------

model Farmhouse {
  id          String          @id @default(uuid()) @db.Uuid
  name        String
  status      FarmhouseStatus @default(ACTIVE)
  featured    Boolean         @default(false)
  location    String?         // freeform or "City, State"
  description String?
  videoUrl    String?
  managerId   String?         @db.Uuid
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  manager        User?                 @relation("ManagedBy", fields: [managerId], references: [id], onDelete: SetNull)
  images         FarmhouseImage[]
  amenitiesLink  FarmhouseAmenity[]
  packages       FarmhousePackage[]
  availability   FarmhouseAvailability[]
  bookings       Booking[]
  reviews        Review[]

  @@index([status, featured])
  @@index([managerId])
}

model FarmhouseImage {
  id          String   @id @default(uuid()) @db.Uuid
  farmhouseId String   @db.Uuid
  isFeatured  Boolean  @default(false)
  images      Json     // array of image URLs (string[])
  createdAt   DateTime @default(now())

  farmhouse Farmhouse @relation(fields: [farmhouseId], references: [id], onDelete: Cascade)

  @@index([farmhouseId])
}

model Amenity {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  icon      String?
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  farmhouses FarmhouseAmenity[]
  @@unique([name, category])
}

model FarmhouseAmenity {
  farmhouseId String @db.Uuid
  amenityId   String @db.Uuid

  farmhouse Farmhouse @relation(fields: [farmhouseId], references: [id], onDelete: Cascade)
  amenity   Amenity   @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@id([farmhouseId, amenityId])
  @@index([amenityId])
}

model FarmhousePackage {
  id               String   @id @default(uuid()) @db.Uuid
  farmhouseId      String   @db.Uuid
  name             String
  pricePerPerson   Decimal  @db.Decimal(10, 2)
  maxCapacity      Int
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  farmhouse Farmhouse @relation(fields: [farmhouseId], references: [id], onDelete: Cascade)

  @@index([farmhouseId])
  @@unique([farmhouseId, name])
}

model FarmhouseAvailability {
  id          String    @id @default(uuid()) @db.Uuid
  farmhouseId String    @db.Uuid
  start       DateTime  // inclusive
  end         DateTime  // exclusive
  isAvailable Boolean   @default(true)
  note        String?

  farmhouse Farmhouse @relation(fields: [farmhouseId], references: [id], onDelete: Cascade)

  @@index([farmhouseId, start, end])
}

// ------------------------ Booking --------------------

model Booking {
  id           String        @id @default(uuid()) @db.Uuid
  farmhouseId  String        @db.Uuid
  userId       String        @db.Uuid
  status       BookingStatus @default(PENDING)
  adults       Int           @default(1)
  children     Int           @default(0)
  checkIn      DateTime
  checkOut     DateTime
  totalPrice   Decimal       @db.Decimal(12, 2)
  guestName    String?
  guestPhone   String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  farmhouse Farmhouse @relation(fields: [farmhouseId], references: [id], onDelete: Restrict)
  user      User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  payments  Payment[]
  coupons   BookingCoupon[]

  @@index([userId, status])
  @@index([farmhouseId, checkIn, checkOut])
}

model DiscountCoupon {
  id         String       @id @default(uuid()) @db.Uuid
  code       String       @unique
  discountType DiscountType
  value      Decimal      @db.Decimal(10, 2) // percent (0-100) or fixed amount
  validFrom  DateTime
  validTo    DateTime?
  minSpend   Decimal?     @db.Decimal(12, 2)
  maxUsage   Int?
  metadata   Json?
  createdAt  DateTime     @default(now())

  bookings BookingCoupon[]
}

model BookingCoupon {
  couponId  String @db.Uuid
  bookingId String @db.Uuid

  coupon  DiscountCoupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  booking Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@id([couponId, bookingId])
  @@index([bookingId])
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  amount          Decimal       @db.Decimal(12, 2)
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?       // e.g. "Razorpay", "Card", "UPI"
  transactionId   String?       @unique
  metadata        Json?
  bookingId       String        @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  refund  Refund?

  @@index([bookingId, status])
}

model Refund {
  id          String       @id @default(uuid()) @db.Uuid
  amount      Decimal      @db.Decimal(12, 2)
  reason      String?
  status      RefundStatus @default(PENDING)
  refundedAt  DateTime?
  paymentId   String       @unique @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Review {
  id          String       @id @default(uuid()) @db.Uuid
  farmhouseId String       @db.Uuid
  userId      String       @db.Uuid
  rating      Int          // 1..5
  title       String?
  message     String?
  status      ReviewStatus @default(PENDING)
  createdAt   DateTime     @default(now())

  farmhouse Farmhouse @relation(fields: [farmhouseId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([farmhouseId])
  @@index([userId])
  @@unique([farmhouseId, userId]) // one review per user per farmhouse
}
